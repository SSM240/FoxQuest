pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- fox quest
-- by ssm24

-- initialization

tiles = {
	spawn = 64
}

function _init()
	-- disable button repeating
	poke(0x5f5c, 255)
	load_player()
end

function load_player()
	spawn_x, spawn_y = find_spawn()
	pl = {
		-- movement state
		x = spawn_x * 8,
		y = spawn_y * 8,
		realx = spawn_x * 8,
		realy = spawn_y * 8,
		speedx=0,
		speedy=0,
		crouching=false,
		lookingup=false,
		-- animation state
		sprite = 1,
		flip_x = false,
		runtimer = 0,
		yoffset=0,
		-- constants
		walkspeed = 1.5,
		walkaccel = 0.3,
		airaccel = 0.25,
		jumpspeed = -3.2,
		gravity = 0.175,
		fallspeed = 3,
		run_animrate = 7,
		sprites = {
			stand = 1,
			walk1 = 1,
			walk2 = 2,
			jump = 3,
			fall = 4,
			crouch = 5,
			lookup = 6
		}
	}
end

function find_spawn()
	-- todo: don't hardcode bounds
	for y=0,15 do
		for x=0,15 do
			if mget(x, y) == tiles.spawn then				
				return x, y
			end
		end
	end
	return 0,0
end
-->8
-- rendering

function _draw()
	cls()
	draw_level()
	draw_player()
	-- default orange blends in
	--pal(9,137,1)
	-- debug
	--[[print("x: "..pl.x,7)
	print("y: "..pl.y,7)
	print("realx: "..pl.realx,7)
	print("realy: "..pl.realy,7)
	print("onground: "..tostr(on_ground()),7)]]
	btns = ""
	for i = 0,5 do
		btns ..= btn(i) and buttons[i] or "  "
	end
	print(btns, 7)
	pal(13,137,1)
end

--counter = 1
--timer = 0
function draw_level()
	--[[clrs = {6,8,12,14,15}
	if timer == 60 then
		timer = 0
		counter = (counter % #clrs) + 1
	end
	timer += 1]]
	rectfill(0, 0, 128, 128, 1)
	map(0, 0, 0, 0, 16, 16, 1)
end

function draw_player()
	if not on_floor() then
		-- in the air
		pl.sprite = pl.speedy < 0
		 and pl.sprites.jump 
		 or pl.sprites.fall
		pl.runtimer = 0
		pl.yoffset = 0
	elseif pl.speedx == 0 then
		-- standing still
		if pl.crouching then
			pl.sprite = pl.sprites.crouch
		elseif pl.lookingup then
			pl.sprite = pl.sprites.lookup
		else
			pl.sprite = pl.sprites.stand
		end
		--pl.sprite = pl.crouching and 3 or 1
		pl.runtimer = 0
		pl.yoffset = 0
	else
		-- running
		pl.runtimer += 1 / pl.run_animrate
		if flr(pl.runtimer) % 2 == 0 then
			pl.sprite = pl.sprites.walk1
			pl.yoffset = 0
		else
			pl.sprite = pl.sprites.walk2
			pl.yoffset = -1
		end
	end
	
	--pal({[9]=12,[3]=2})
	--spr_outline(pl.sprite, pl.x, pl.y + pl.yoffset, 1, 1, pl.flip_x)
	spr(pl.sprite, pl.x, pl.y + pl.yoffset, 1, 1, pl.flip_x)
	
	--pal()
end
-->8
-- update loop


function _update60()
	update_player()
end

function update_player()
	-- horizontal movement
	accel = on_ground()
	 and pl.walkaccel
	 or pl.airaccel
	if both(btn(‚¨ÖÔ∏è),btn(‚û°Ô∏è)) then
		pl.speedx = approach(pl.speedx, 0, accel)
	elseif btn(‚¨ÖÔ∏è) then
		pl.speedx = approach(pl.speedx, -pl.walkspeed, accel)
		if (pl.speedx <= 0) pl.flip_x = true
 elseif btn(‚û°Ô∏è) then
		pl.speedx = approach(pl.speedx, pl.walkspeed, accel)
		if (pl.speedx >= 0) pl.flip_x = false
	end
	
	pl.crouching = false
	pl.lookingup = false
	if (pl.speedx == 0) then
		if not both(btn(‚¨áÔ∏è),btn(‚¨ÜÔ∏è)) then
			if (btn(‚¨áÔ∏è)) pl.crouching = true
			if (btn(‚¨ÜÔ∏è)) pl.lookingup = true
		end
	end
	
	pl.speedx = max(min(pl.speedx, pl.walkspeed), -pl.walkspeed)
	
	-- vertical movement
	if pressed(üÖæÔ∏è) and on_floor() then
		player_jump()
	end
	
	if pl.speedy < 0 and not btn(üÖæÔ∏è) then
		pl.speedy += pl.gravity * 4
	else
		pl.speedy += pl.gravity
	end
	pl.speedy = min(pl.speedy, pl.fallspeed)
	
	move_player(pl.speedx, pl.speedy)
end

-- will be fancier later?
function pressed(button)
	return btnp(button)
end

function player_jump()
	sfx(0)
	pl.speedy = pl.jumpspeed
end

function move_player(move_x, move_y)
	-- x movement
	pl.realx += move_x
	while abs(pl.realx - pl.x) > 1 do
		-- one pixel at a time
		pl.x +=	sgn(pl.realx - pl.x)
		if check_collision() then
			-- undo last step
			pl.x -=	sgn(pl.realx - pl.x)
			pl.realx = pl.x
			pl.speedx = 0
		end
	end
	-- y movement
	pl.realy += move_y
	while abs(pl.realy - pl.y) > 1 do
		pl.y +=	sgn(pl.realy - pl.y)
		if check_collision() then
			pl.y -=	sgn(pl.realy - pl.y)
			pl.realy = pl.y
			-- bonk if moving up
			if (pl.speedy < 0) then 
				sfx(1)
			end
			pl.speedy = 0
		end
	end
end
-->8
-- helper functions

function approach(val, target, rate)
	if val > target then
		return max(val - rate, target)
	elseif val < target then
		return min(val + rate, target)
	else
		return target
	end
end

--[[
function xor(x,y)
	return x!=y
end
neither = xor]]

function xnor(x,y)
	return x==y
end
both = xnor

buttons = {
	[0]="‚¨ÖÔ∏è",
	[1]="‚û°Ô∏è",
	[2]="‚¨ÜÔ∏è",
	[3]="‚¨áÔ∏è",
	[4]="üÖæÔ∏è",
	[5]="‚ùé",
}

--
function spr_outline(n,x,y,w,h,flip_x,flip_y)
	for i = 1,15 do pal(i,0) end
	pal(0,1)
	palt(1,false)
	for i = 0,0.75,0.25 do
		offsetx = cos(i)
		offsety = sin(i)
		spr(n,x+offsetx,y+offsety,w,h,flip_x,flip_y)
	end
	pal()
	palt()
end
--]]
-->8
-- collision detection

function is_in_solid(x, y)
	mx = flr(x/8)
	my = flr(y/8)
	-- flag 1 means solid
	return fget(mget(mx, my), 1)
end

function check_collision()
	left, right, top, bottom =
		pl.x+1, pl.x+6, pl.y+2, pl.y+7
		
	return is_in_solid(left, top)
	 or is_in_solid(left, bottom)
	 or is_in_solid(right, top)
	 or is_in_solid(right, bottom)
end

function on_floor()
	left, right, bottom = 
		pl.x+1, pl.x+6, pl.y+7
	return is_in_solid(left, bottom+1)
	 or is_in_solid(right, bottom+1)
end
-- consistency is cringe
on_ground = on_floor
-->8
-- actors

-- global actor list
actors = {}

-- create actor functions
-- indexed by sprite id
actor_creators = {
	[1] = create_player,
}

function create_actor(x, y, id)
	if actor_creators[id] != nil then
		return actor_creators[id](x, y)
	end
	local actor = {
		-- movement state
		x = x,
		y = y,
		realx = x,
		realy = y,
		speedx = 0,
		speedy = 0,
		-- hitbox
		w = 8,
		h = 8,
		-- sprite
		sprite = 0,
		flipx = false,
		flipy = false,
		offsetx = 0,
		offsety = 0,
		-- methods
		--function _init(self) end
		--function _update(self) end
		--function _render(self) end
	}
	actors.insert(actor)
	return actor
end

function create_player()
	
end
__gfx__
00000000000900900009009000900900000900900000000000900900000000000000000000000000000000000000000000000000000000000000000000000000
00000000000999900009999000093930700999900009009000093930000000000000000000000000000000000000000000000000000000000000000000000000
00700700790939307909393000099995790939300009999000099995000000000000000000000000000000000000000000000000000000000000000000000000
00077000790999957909999509099990090999950009393079099990000000000000000000000000000000000000000000000000000000000000000000000000
00077000009999900099999079999900009999907909999579999900000000000000000000000000000000000000000000000000000000000000000000000000
00700700009999000099990070999900009999007999999000999900000000000000000000000000000000000000000000000000000000000000000000000000
00000000009009000090090000900900009009000099990000900900000000000000000000000000000000000000000000000000000000000000000000000000
00000000007007000700007007007000070000700070070000700700000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bbbbbbbbbb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bbbbbbbbbb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bb4444bbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bb4444bbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0101010101010101010101010101010103030303030303010101010101010101030303030303030101010101010101010303030303030101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1331313131313131313131313131311400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000015260000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000001526000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000010120000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000030322600000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000001012002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200001534260000003300002022002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200400000000000330000102422000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2311111111111111111111242123111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100001a0501c0501e0502005022050230402303024030250302603028030290202a0202b0202b0102c0102c0102d0102d0102e0102e0102e0002e0002e0002f0002e0002e0002e0002e0002e0002e0002e000
000100001a740147401274011740107400f7400b7400a730097200972008720067100571004710017000070000700007000070000700000000000000000000000000000000000000000000000000000000000000
