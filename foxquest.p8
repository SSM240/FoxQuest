pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
-- fox quest
-- by ssm24

-- initialization

-- todo:
-- - figure out actor/spawner
--   relation better
-- - move movement/collision
--   code into base actor
--   table

function _init()
	-- disable button repeating
	poke(0x5f5c, 255)
	load_room(1)
end

room_info = {
	[1] = {
		x = 0,
		y = 0,
		w = 16,
		h = 16,
		vertical = false
	}
}

function load_room(num)
 -- reset state
 actors = {}
 spawners = {}
	room = room_info[num]
	-- find spawners
	local left = room.x
	local right = room.w - room.x
	local top = room.y
	local bottom = room.h - room.y
 for y = top, bottom do
 	for x = left, right do
 		local sprite = mget(x, y)
 		if fget(sprite, 0x7) then
 			local spawner = 
 			 create_spawner(x, y, sprite)
 			add(spawners, spawner)
 		end
 	end
 end
 -- spawn initial actors
 for sp in all(spawners) do
 	if sp.x >= left - 2
 	 and sp.x <= right + 2
 	 and sp.y >= top - 2
 	 and sp.y <= bottom + 2
 	then
 		local actor = sp:spawn()
 		add(actors, actor)
 	end
 end
end
-->8
-- rendering

function _draw()
	cls()
	draw_level()
 for actor in all(actors) do
 	actor:draw()
 end
	-- default orange blends in
	--pal(9,137,1)
	-- debug
	--[[print("x: "..pl.x,7)
	print("y: "..pl.y,7)
	print("realx: "..pl.realx,7)
	print("realy: "..pl.realy,7)
	print("onground: "..tostr(on_ground()),7)]]
	btns = ""
	for i = 0,5 do
		btns ..= btn(i) and buttons[i] or "  "
	end
	print(btns, 7)
	pal(13,137,1)
end

--counter = 1
--timer = 0
function draw_level()
	--[[clrs = {6,8,12,14,15}
	if timer == 60 then
		timer = 0
		counter = (counter % #clrs) + 1
	end
	timer += 1]]
	rectfill(0, 0, 128, 128, 1)
	map(0, 0, 0, 0, 16, 16, 0x01)
end


-->8
-- update loop

function _update60()
	for actor in all(actors) do
		if actor.update != nil then
			actor:update()
		end
	end
end

--function update_player()
--
--end

-- will be fancier later?
function pressed(button)
	return btnp(button)
end

function move_player(move_x, move_y)
	-- x movement
	pl.realx += move_x
	while abs(pl.realx - pl.x) > 1 do
		-- one pixel at a time
		pl.x +=	sgn(pl.realx - pl.x)
		if check_collision() then
			-- undo last step
			pl.x -=	sgn(pl.realx - pl.x)
			pl.realx = pl.x
			pl.speedx = 0
		end
	end
	-- y movement
	pl.realy += move_y
	while abs(pl.realy - pl.y) > 1 do
		pl.y +=	sgn(pl.realy - pl.y)
		if check_collision() then
			pl.y -=	sgn(pl.realy - pl.y)
			pl.realy = pl.y
			-- bonk if moving up
			if (pl.speedy < 0) then 
				sfx(1)
			end
			pl.speedy = 0
		end
	end
end
-->8
-- helper functions

function approach(val, target, rate)
	if val > target then
		return max(val - rate, target)
	elseif val < target then
		return min(val + rate, target)
	else
		return target
	end
end

--[[
function xor(x,y)
	return x!=y
end
neither = xor]]

function xnor(x,y)
	return x==y
end
both = xnor

buttons = {
	[0]="‚¨ÖÔ∏è",
	[1]="‚û°Ô∏è",
	[2]="‚¨ÜÔ∏è",
	[3]="‚¨áÔ∏è",
	[4]="üÖæÔ∏è",
	[5]="‚ùé",
}

--[[
function spr_outline(n,x,y,w,h,flip_x,flip_y)
	for i = 1,15 do pal(i,0) end
	pal(0,1)
	palt(1,false)
	for i = 0,0.75,0.25 do
		offsetx = cos(i)
		offsety = sin(i)
		spr(n,x+offsetx,y+offsety,w,h,flip_x,flip_y)
	end
	pal()
	palt()
end
--]]
-->8
-- collision detection

function is_in_solid(x, y)
	mx = flr(x/8)
	my = flr(y/8)
	-- flag 1 means solid
	return fget(mget(mx, my), 1)
end

function check_collision()
	left, right, top, bottom =
		pl.x+1, pl.x+6, pl.y+2, pl.y+7
		
	return is_in_solid(left, top)
	 or is_in_solid(left, bottom)
	 or is_in_solid(right, top)
	 or is_in_solid(right, bottom)
end

function on_floor()
	left, right, bottom = 
		pl.x+1, pl.x+6, pl.y+7
	return is_in_solid(left, bottom+1)
	 or is_in_solid(right, bottom+1)
end
-- consistency is cringe
on_ground = on_floor
-->8
-- actors and spawners

function create_spawner(x, y, id)
	local spawner = {
		x = x,
		y = y,
		id = id,
		enabled = true,
		actor_alive = false,
		spawn = function(self)
			return create_actor(
			 self.x * 8,
			 self.y * 8,
			 self.id,
			 self)
		end
	}
	return spawner
end

actormeta = {
	__concat = function(orig, new)
		for k,v in pairs(new) do
			orig[k] = v
		end
		return orig
	end
}

function create_actor(x, y, id, spawner)
 actor_creators = {
		[1] = create_player,
	}
	if actor_creators[id] != nil then
		return actor_creators[id](x, y)
	end
	local actor = {
		-- movement state
		x = x,
		y = y,
		realx = x,
		realy = y,
		speedx = 0,
		speedy = 0,
		-- hitbox
		w = 8,
		h = 8,
		-- spawn state
		spawner = spawner,
		-- sprite
		sprite = 0,
		flipx = false,
		flipy = false,
		offsetx = 0,
		offsety = 0,
		-- methods
		--function _init(self) end
		--function _update(self) end
		--function _draw(self) end
	}
	setmetatable(actor, actormeta)
	return actor
end


-->8
-- player definition

function create_player(x, y)
	pl = create_actor(x, y)	
	pl = pl .. {
		crouching=false,
		lookingup=false,
		-- animation state
		sprite = 1,
		runtimer = 0,
		-- constants
		walkspeed = 1.5,
		walkaccel = 0.3,
		airaccel = 0.25,
		jumpspeed = -3.2,
		gravity = 0.175,
		fallspeed = 3,
		run_animrate = 7,
		sprites = {
			stand = 1,
			walk1 = 1,
			walk2 = 2,
			jump = 3,
			fall = 4,
			crouch = 5,
			lookup = 6
		},
		-- update methods
		update = function(self)
			-- horizontal inputs
			accel = on_ground()
			 and self.walkaccel
			 or self.airaccel
			if both(btn(‚¨ÖÔ∏è),btn(‚û°Ô∏è)) then
				self.speedx = approach(self.speedx, 0, accel)
			elseif btn(‚¨ÖÔ∏è) then
				self.speedx = approach(self.speedx, -self.walkspeed, accel)
				if (self.speedx <= 0) self.flipx = true
		 elseif btn(‚û°Ô∏è) then
				self.speedx = approach(self.speedx, self.walkspeed, accel)
				if (self.speedx >= 0) self.flipx = false
			end
			-- vertical inputs
			self.crouching = false
			self.lookingup = false
			if (self.speedx == 0) then
				if not both(btn(‚¨áÔ∏è),btn(‚¨ÜÔ∏è)) then
					if (btn(‚¨áÔ∏è)) self.crouching = true
					if (btn(‚¨ÜÔ∏è)) self.lookingup = true
				end
			end
			self.speedx = max(min(self.speedx, self.walkspeed), -self.walkspeed)
			-- vertical movement
			if pressed(üÖæÔ∏è) and on_floor() then
				self:jump()
			end
			
			if self.speedy < 0 and not btn(üÖæÔ∏è) then
				self.speedy += self.gravity * 4
			else
				self.speedy += self.gravity
			end
			self.speedy = min(self.speedy, self.fallspeed)
			
			move_player(self.speedx, self.speedy)
		end,
		
		jump = function(self)
			sfx(0)
			self.speedy = self.jumpspeed
		end,
		
		-- rendering code
		draw = function(self)
			if not on_floor() then
				-- in the air
				self.sprite = self.speedy < 0
				 and self.sprites.jump 
				 or self.sprites.fall
				self.runtimer = 0
				self.yoffset = 0
			elseif self.speedx == 0 then
				-- standing still
				if self.crouching then
					self.sprite = self.sprites.crouch
				elseif self.lookingup then
					self.sprite = self.sprites.lookup
				else
					self.sprite = self.sprites.stand
				end
				--self.sprite = self.crouching and 3 or 1
				self.runtimer = 0
				self.yoffset = 0
			else
				-- running
				self.runtimer += 1 / self.run_animrate
				if flr(self.runtimer) % 2 == 0 then
					self.sprite = self.sprites.walk1
					self.yoffset = 0
				else
					self.sprite = self.sprites.walk2
					self.yoffset = -1
				end
			end
			
			--pal({[9]=12,[3]=2})
			--spr_outline(self.sprite, self.x, self.y + self.yoffset, 1, 1, self.flip_x)
			spr(self.sprite, self.x, self.y + self.yoffset, 1, 1, self.flipx)
			
			--pal()
		end
	}
	return pl
end
__gfx__
00000000000900900009009000900900000900900000000000900900000000000000000000000000000000000000000000000000000000000000000000000000
00000000000999900009999000093930700999900009009000093930008888000000000000000000000000000000000000000000000000000000000000000000
00700700790939307909393000099995790939300009999000099995088888800088880000000000000000000000000000000000000000000000000000000000
00077000790999957909999509099990090999950009393079099990808088880888888000000000000000000000000000000000000000000000000000000000
00077000009999900099999079999900009999907909999579999900808088888080888800000000000000000000000000000000000000000000000000000000
00700700009999000099990070999900009999007999999000999900888888888080888800000000000000000000000000000000000000000000000000000000
00000000009009000090090000900900009009000099990000900900888888888888888800000000000000000000000000000000000000000000000000000000
00000000007007000700007007007000070000700070070000700700088888800888888000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb444444bb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bbbbbbbbbb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bbbbbbbbbb4444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bb4444bbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb444444bbbb444444bb4444bbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bb4444bb444444bb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bb4444444444444444bbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bb44444444444444444444bbbb4444bb44444444bb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb4444bb00000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00488000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0180010101010101010101010101010103030303030303010101010101010101030303030303030101010101010101010303030303030101010101010101010100010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1331313131313131313131313131311400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000015260000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000001526000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000010120000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000030322600000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200000000000000000000001012002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200001534260000003300002022002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2200010000000000330000102422000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2311111111111111111111242123111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100001a0501c0501e0502005022050230402303024030250302603028030290202a0202b0202b0102c0102c0102d0102d0102e0102e0102e0002e0002e0002f0002e0002e0002e0002e0002e0002e0002e000
000100001a740147401274011740107400f7400b7400a730097200972008720067100571004710017000070000700007000070000700000000000000000000000000000000000000000000000000000000000000
